<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c++求斐波拉西数列</title>
    <link href="/2021/10/02/c++%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/10/02/c++%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="使用c-模板元编程求斐波拉西数列"><a href="#使用c-模板元编程求斐波拉西数列" class="headerlink" title="使用c++模板元编程求斐波拉西数列"></a>使用c++模板元编程求斐波拉西数列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">int</span> num&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fib</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>result=fib&lt;num<span class="hljs-number">-1</span>&gt;::result+fib&lt;num<span class="hljs-number">-2</span>&gt;::result&#125;;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fib</span>&lt;</span><span class="hljs-number">0</span>&gt;<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>result=<span class="hljs-number">1</span>&#125;;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fib</span>&lt;</span><span class="hljs-number">1</span>&gt;<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span> result=<span class="hljs-number">1</span>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="使用constexpr-关键字求"><a href="#使用constexpr-关键字求" class="headerlink" title="使用constexpr 关键字求"></a>使用constexpr 关键字求</h3><p>constexpr  允许编程者保证函数或对象的构造函数是编译时常量</p><p>在此处时都是允许在编译期对其进行求值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// C++11</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> <span class="hljs-title">factorial_Cpp11</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> n == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : n * <span class="hljs-built_in">factorial_Cpp11</span>(n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// C++14</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> <span class="hljs-title">factorial_Cpp14</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        result *= i;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>求素数</title>
    <link href="/2021/10/02/%E6%B1%82%E7%B4%A0%E6%95%B0/"/>
    <url>/2021/10/02/%E6%B1%82%E7%B4%A0%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="求素数："><a href="#求素数：" class="headerlink" title="求素数："></a>求素数：</h2><h3 id="朴素算法求素数："><a href="#朴素算法求素数：" class="headerlink" title="朴素算法求素数："></a>朴素算法求素数：</h3><p>算法描述：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-comment">//c++使用cmath c使用math.h</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br> <br><span class="hljs-keyword">int</span> i,sqr = <span class="hljs-built_in">sqrt</span>((<span class="hljs-keyword">double</span>)n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;=sqr; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> ( (n%i) == <span class="hljs-number">0</span> )<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">200</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isPrime</span>(i))<br>        cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="埃式筛选法及求素数的基本原理："><a href="#埃式筛选法及求素数的基本原理：" class="headerlink" title="埃式筛选法及求素数的基本原理："></a>埃式筛选法及求素数的基本原理：</h3><p>筛法求素数的基本思想是：把从2到N的一组<a href="https://baike.baidu.com/item/%E6%AD%A3%E6%95%B4%E6%95%B0">正整数</a>从小到大按顺序排列。从中依次删除2的倍数、3的倍数、5的倍数，直到根号N的倍数为止，剩余的即为2~N之间的所有素数</p><h4 id="使用c-来描述这一操作："><a href="#使用c-来描述这一操作：" class="headerlink" title="使用c++来描述这一操作："></a>使用c++来描述这一操作：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> range 2000</span><br><span class="hljs-keyword">bool</span> IsPrime[range + <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initPrime</span><span class="hljs-params">(<span class="hljs-keyword">bool</span> IsPrime[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= range; ++i)<br>        IsPrime[i] = <span class="hljs-literal">true</span>;<br>    IsPrime[<span class="hljs-number">0</span>] = IsPrime[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= range; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (IsPrime[i]) &#123;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">2</span> * i; j &lt;= range; j += i)<br>                IsPrime[j]=<span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度为<em>O</em>(<em>N<strong>l</strong>o<strong>g</strong>l<strong>o</strong>g**N</em>)</p><h3 id="欧式素数筛及其原理："><a href="#欧式素数筛及其原理：" class="headerlink" title="欧式素数筛及其原理："></a>欧式素数筛及其原理：</h3><p>在埃式基础上增加操作：每一个被筛掉的数都必须是被它的最小质因子筛掉，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>)<span class="hljs-comment">//确保是最小质因数</span><br>&#123;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initPrime_ou</span><span class="hljs-params">(<span class="hljs-keyword">bool</span> isPrime[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> prime[range];<br>    <span class="hljs-keyword">int</span> h = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= range; ++i)<br>        IsPrime[i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= range; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (isPrime[i]) prime[h++] = i;<br>        <span class="hljs-keyword">for</span> (j  = <span class="hljs-number">0</span>; j &lt; h &amp;&amp; i*prime[j]&lt;=range; ++j) &#123;<br>            isPrime[i*prime[j]] =<span class="hljs-literal">false</span>; <span class="hljs-comment">//筛去i的倍数</span><br>            <span class="hljs-keyword">if</span> (i%prime[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//保证每个合数被他的最小质因数筛去（去重</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>求素数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习入门《1》感知机</title>
    <link href="/2021/10/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8A1%E3%80%8B%E6%84%9F%E7%9F%A5%E6%9C%BA/"/>
    <url>/2021/10/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8A1%E3%80%8B%E6%84%9F%E7%9F%A5%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="感知机是什么？"><a href="#感知机是什么？" class="headerlink" title="感知机是什么？"></a>感知机是什么？</h2><p>感知机(Perceptron)在1957年由Rosenblatt提出，是神经网络和支持向量机的基础。</p><p>感知机是一种二类分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，+1代表正类，-1代表负类。感知机属于判别模型，它的目标是要将输入实例通过分离超平面将正负二类分离。</p><p>简单来说就是接受多个信号来输出一个信号</p><p><img src="%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8A1%E3%80%8B%E6%84%9F%E7%9F%A5%E6%9C%BA/20160920193516651.jpg"></p><h3 id="以下内容为单层感知机的部分："><a href="#以下内容为单层感知机的部分：" class="headerlink" title="以下内容为单层感知机的部分："></a>以下内容为单层感知机的部分：</h3><p>（因为单层感知机的局限性，他只支持 与门，或门，与非门,原因是它只能由一条直线分开，曲线是无法用感知机表示的</p><p>由直线分割的为线性空间，曲线分割的为非线性空间</p><h3 id="简单逻辑电路"><a href="#简单逻辑电路" class="headerlink" title="简单逻辑电路"></a>简单逻辑电路</h3><h4 id="与门"><a href="#与门" class="headerlink" title="与门"></a>与门</h4><p>与门如果用我们常用的c来描述的话应该是指的 &amp;&amp;</p><p>对应的真值表为</p><table><thead><tr><th>A</th><th>B</th><th>Y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>下文中仍然以 0为假，1为真</p><h5 id="使用感知机实现与门："><a href="#使用感知机实现与门：" class="headerlink" title="使用感知机实现与门："></a>使用感知机实现与门：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">AND</span>(<span class="hljs-params">a, b</span>):</span><br>    x = np.array([a, b])<br>    w = np.array([<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>])<br>    b = -<span class="hljs-number">0.7</span><br>    tmp = np.<span class="hljs-built_in">sum</span>(w * x) + b<br>    <span class="hljs-keyword">if</span> tmp &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>其中b 为偏置，是调整神经元被激活的容易程度（输出信号为1的程度）</p><h4 id="与非门"><a href="#与非门" class="headerlink" title="与非门"></a>与非门</h4><p>简单来说就是与门的反面</p><p>对应的真值表为：</p><table><thead><tr><th>A</th><th>B</th><th>Y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><h5 id="使用感知机实现与非门："><a href="#使用感知机实现与非门：" class="headerlink" title="使用感知机实现与非门："></a>使用感知机实现与非门：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">NAND</span>(<span class="hljs-params">a, b</span>):</span><br>    x = np.array([a, b])<br>    w = np.array([-<span class="hljs-number">0.5</span>, -<span class="hljs-number">0.5</span>])<br>    b = <span class="hljs-number">0.7</span><br>    tmp = np.<span class="hljs-built_in">sum</span>(w * x) + b<br>    <span class="hljs-keyword">if</span> tmp &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h4 id="或门"><a href="#或门" class="headerlink" title="或门"></a>或门</h4><p>或门用通常的c描述就是 ||操作</p><p>对应的真值表：</p><table><thead><tr><th>A</th><th>B</th><th>Y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><h5 id="使用感知机实现或门："><a href="#使用感知机实现或门：" class="headerlink" title="使用感知机实现或门："></a>使用感知机实现或门：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">OR</span>(<span class="hljs-params">a, b</span>):</span><br>    x = np.array([a, b])<br>    w = np.array([<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>])<br>    b = -<span class="hljs-number">0.2</span><br>    tmp = np.<span class="hljs-built_in">sum</span>(w * x) + b<br>    <span class="hljs-keyword">if</span> tmp &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="以下为多层感知机内容："><a href="#以下为多层感知机内容：" class="headerlink" title="以下为多层感知机内容："></a>以下为多层感知机内容：</h3><h4 id="异或门："><a href="#异或门：" class="headerlink" title="异或门："></a>异或门：</h4><p>又称逻辑异或电路，仅当a或b中的一方为1时，才会输出1（“异或”为拒绝其他的意思）</p><p>其真值表为：</p><table><thead><tr><th>A</th><th>B</th><th>Y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>可以通过组合与门，与非门，或门来实现异或门</p><p><img src="%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8A1%E3%80%8B%E6%84%9F%E7%9F%A5%E6%9C%BA/12472907-e997d8f579f7c831.webp"></p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>Y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">XOR</span>(<span class="hljs-params">a, b</span>):</span><br>    s1 = NAND(a, b)<br>    s2 = OR(a, b)<br>    y = AND(s1, s2)<br>    <span class="hljs-keyword">return</span> y<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感知机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp简单特性学习笔记</title>
    <link href="/2021/10/01/cpp%E7%AE%80%E5%8D%95%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/10/01/cpp%E7%AE%80%E5%8D%95%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>标签测试</p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
