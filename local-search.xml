<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>求素数</title>
    <link href="/2021/10/02/%E6%B1%82%E7%B4%A0%E6%95%B0/"/>
    <url>/2021/10/02/%E6%B1%82%E7%B4%A0%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="求素数："><a href="#求素数：" class="headerlink" title="求素数："></a>求素数：</h2><h3 id="朴素算法求素数："><a href="#朴素算法求素数：" class="headerlink" title="朴素算法求素数："></a>朴素算法求素数：</h3><p>算法描述：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-comment">//c++使用cmath c使用math.h</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br> <br><span class="hljs-keyword">int</span> i,sqr = <span class="hljs-built_in">sqrt</span>((<span class="hljs-keyword">double</span>)n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;=sqr; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> ( (n%i) == <span class="hljs-number">0</span> )<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">200</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isPrime</span>(i))<br>        cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="埃式筛选法及求素数的基本原理："><a href="#埃式筛选法及求素数的基本原理：" class="headerlink" title="埃式筛选法及求素数的基本原理："></a>埃式筛选法及求素数的基本原理：</h3><p>筛法求素数的基本思想是：把从2到N的一组<a href="https://baike.baidu.com/item/%E6%AD%A3%E6%95%B4%E6%95%B0">正整数</a>从小到大按顺序排列。从中依次删除2的倍数、3的倍数、5的倍数，直到根号N的倍数为止，剩余的即为2~N之间的所有素数</p><h4 id="使用c-来描述这一操作："><a href="#使用c-来描述这一操作：" class="headerlink" title="使用c++来描述这一操作："></a>使用c++来描述这一操作：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> range 2000</span><br><span class="hljs-keyword">bool</span> IsPrime[range + <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initPrime</span><span class="hljs-params">(<span class="hljs-keyword">bool</span> IsPrime[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= range; ++i)<br>        IsPrime[i] = <span class="hljs-literal">true</span>;<br>    IsPrime[<span class="hljs-number">0</span>] = IsPrime[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= range; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (IsPrime[i]) &#123;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">2</span> * i; j &lt;= range; j += i)<br>                IsPrime[j]=<span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度为<em>O</em>(<em>N<strong>l</strong>o<strong>g</strong>l<strong>o</strong>g**N</em>)</p><h3 id="欧式素数筛及其原理："><a href="#欧式素数筛及其原理：" class="headerlink" title="欧式素数筛及其原理："></a>欧式素数筛及其原理：</h3><p>在埃式基础上增加操作：每一个被筛掉的数都必须是被它的最小质因子筛掉，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>)<span class="hljs-comment">//确保是最小质因数</span><br>&#123;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initPrime_ou</span><span class="hljs-params">(<span class="hljs-keyword">bool</span> isPrime[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> prime[range];<br>    <span class="hljs-keyword">int</span> h = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= range; ++i)<br>        IsPrime[i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= range; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (isPrime[i]) prime[h++] = i;<br>        <span class="hljs-keyword">for</span> (j  = <span class="hljs-number">0</span>; j &lt; h &amp;&amp; i*prime[j]&lt;=range; ++j) &#123;<br>            isPrime[i*prime[j]] =<span class="hljs-literal">false</span>; <span class="hljs-comment">//筛去i的倍数</span><br>            <span class="hljs-keyword">if</span> (i%prime[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//保证每个合数被他的最小质因数筛去（去重</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>求素数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习入门</title>
    <link href="/2021/10/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    <url>/2021/10/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>a</p><p>菜鸡的深度学习入门笔记</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp简单特性学习笔记</title>
    <link href="/2021/10/01/cpp%E7%AE%80%E5%8D%95%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/10/01/cpp%E7%AE%80%E5%8D%95%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>标签测试</p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
