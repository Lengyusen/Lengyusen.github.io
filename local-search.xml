<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2021/11/14/%E6%A0%91/"/>
    <url>/2021/11/14/%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树是一种分支结构，逻辑上是一对多，具有明显的递归特性。</p><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ul><li>结点：包含一个数据元素和若干指向子树的分支</li><li>结点的度：结点上分支的个数</li><li>数的度：所有结点的最大分支数(结点度的最大值)</li><li>叶子节点：度为零的节点(末端)</li><li>双亲、孩子：结点的子树的根称为该结点的孩子，该结点称为孩子的双亲</li><li>森林：多棵树放在一起</li></ul><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树的每个结点至多只有两棵子树，且子树有左右之分，次序不能颠倒</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>满二叉树：除了最底层每个结点都有左右两个孩子</li><li>完全二叉树：满二叉树从最底层开始从右往左删除结点，满二叉树是特殊的完全二叉树</li></ul><h4 id="求完全二叉树的高度-h"><a href="#求完全二叉树的高度-h" class="headerlink" title="求完全二叉树的高度(h)"></a>求完全二叉树的高度(h)</h4><p>解此类问题重在分析结点与高度之间的关系</p><p>1.先分析满二叉树</p><p>![img](file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\F06C28DB02E9D1EBA4077DD627BC071A.jpg)</p><p>2.一般的完全二叉树</p><p>​     方法①：</p><p>![img](file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\B520005BA6A661BC36A5CBFEB8260729.jpg)</p><p>![img](file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\C79655C54222BEC83BCDD60A33FBEC0E.jpg)</p><p>​     方法②：</p><p>![img](file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\14F0AF8E1F1DD63E69940BA566D8B5B7.jpg)</p><p>综上有两个公式(我偏向于记忆第一个，因为第一个更便于理解)</p><p>![img](file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\56EB97FA5643D36AB5D969D00686A794.jpg)</p><p>​                （注：第一个是向下取整，第二个是向上取整）</p><h3 id="二叉树的一些性质"><a href="#二叉树的一些性质" class="headerlink" title="二叉树的一些性质"></a>二叉树的一些性质</h3><ul><li><p>总分支数=总结点数-1</p><p>   叶结点个数为N0</p><p>   单分枝结点个数为N1</p><p>   双分支结点个数为N2</p></li><li><p>总结点数=N0+N1+N2</p></li><li><p>总分支数=N1+2N2</p><p>   <strong>从而解得：N0=N2+1</strong></p><p>​                     <strong>叶子结点数=双分支节点数+1</strong></p><p>（普通树可用同样的方法类比：N0=1+N2+2N3+…+(m-1)Nm）</p></li></ul><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><h4 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h4><p>把每个结点存入数组之中(但只对完全二叉树适用)</p><p>![img](file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\6879E5CA54A244F6D9F13F05AD430235.jpg)</p><h4 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h4><p>首先我们看看树的链式存储结构，用链表存储孩子结点的信息</p><p>![img](file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\31C74FFF31C21E4792E95A574724EBFF.jpg)</p><p>​     然后我们看二叉树，则可以表链表的长度取成二，但我们之所以用链表来存储数的信息，是因为链表方便存储不确定个数的信息。而我们现在已经知道了二叉树最多只有两个子树，所以我们可以直接定义两个指针来指向左右两个孩子。</p><p>![img](file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\1A256C933F8626A252683FEDD01EB861.jpg)</p><h3 id="数与二叉树的相互转换"><a href="#数与二叉树的相互转换" class="headerlink" title="数与二叉树的相互转换"></a>数与二叉树的相互转换</h3><p>​     方法：将数转化为二叉树：首先将每个结点与其兄弟结点相连，然后只留下最左边的连线，删去其他连线，最终形成的二叉树左边的连线是连的孩子，右边的连线是连的兄弟。而将二叉树转化为树则与上述操作相反即可，补全与双亲的连线，删去与兄弟的连线。下图是将树转化为二叉树的一个事例：</p><img src="file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\FB481DD3FAD88556E1850D77BCC54920.jpg" alt="img" style="zoom: 25%;"><h3 id="森林与二叉树的相互转换"><a href="#森林与二叉树的相互转换" class="headerlink" title="森林与二叉树的相互转换"></a>森林与二叉树的相互转换</h3><p>  方法：森林转化为二叉树：首先将森林中的每棵数都先转化为二叉树，则每棵二叉树根节点的左边接的是子树，右边为空，然后就可以让右边接下一棵树的根节点。而将二叉树转换为森林即实现相反操作。</p><img src="file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\0163938A33B279A3770AB24ED6D120FB.jpg" alt="img" style="zoom: 25%;"><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ul><li><p>层次遍历(广度优先遍历)：从上至下，从左至右</p></li><li><p><em><strong>前序遍历：根-左-右</strong></em></p></li><li><p><em><strong>中序遍历：左-根-右</strong></em></p></li><li><p><em><strong>后序遍历：左-右-根</strong></em></p></li></ul><img src="file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\7B0ACC7E9692F5401BB179C67F32438C.jpg" alt="img" style="zoom: 50%;"><p>​        树的遍历：</p><img src="file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\2FAE304F42ECD1CA3B8DF1C394672E85.jpg" alt="img" style="zoom: 25%;"><p>​        森林的遍历：</p><img src="file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\3C551A4C1BE1291709BC8F848781898A.jpg" alt="img" style="zoom: 25%;"><h4 id="递归函数基础"><a href="#递归函数基础" class="headerlink" title="递归函数基础"></a>递归函数基础</h4><p>函数自己调用自己</p><img src="file:///C:\Users\86150\Documents\Tencent Files\1289306263\Image\C2C\Image1\EEC46EE6479E306BFF6318E5232F51BD.jpg" alt="img" style="zoom: 67%;"><h4 id="二叉树遍历以代码实现"><a href="#二叉树遍历以代码实现" class="headerlink" title="二叉树遍历以代码实现"></a>二叉树遍历以代码实现</h4>]]></content>
    
    
    <categories>
      
      <category>数据结构学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
